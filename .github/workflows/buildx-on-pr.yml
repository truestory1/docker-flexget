name: buildx-on-pr

on:
  pull_request:
  workflow_dispatch:

env:
  IMAGE_NAME: ghcr.io/truestory1/flexget
  PLATFORMS: linux/amd64 #,linux/arm64

jobs:
  buildx-on-pr:
    runs-on: ubuntu-22.04
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Compile requirements.txt
        run: |
          docker run --rm -i -v ${PWD}:/req alpine:3.20.0 \
            sh -c "apk add py3-pip build-base python3-dev libffi-dev && rm /usr/lib/python*/EXTERNALLY-MANAGED && pip install pip-tools && cd /req && pip-compile -U"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Initial Buildx
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          tags: ${{ env.IMAGE_NAME }}:testing
          platforms: linux/amd64,linux/arm64
          provenance: false
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Login to ghcr.io
        uses: docker/login-action@v3
        if: github.actor == github.event.repository.owner.login
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Buildx and Push
        uses: docker/build-push-action@v6
        if: github.actor == github.event.repository.owner.login
        with:
          context: .
          file: Dockerfile
          tags: |
            ghcr.io/${{ env.IMAGE_NAME }}:testing
            ghcr.io/${{ env.IMAGE_NAME }}:testing-${{ github.event.pull_request.number }}
          platforms: linux/amd64,linux/arm64
          provenance: false
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: requirements.txt
          path: requirements.txt
